; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29912.0 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?iFreq@@3T_LARGE_INTEGER@@A			; iFreq
_BSS	SEGMENT
?iFreq@@3T_LARGE_INTEGER@@A DQ 01H DUP (?)		; iFreq
_BSS	ENDS
CONST	SEGMENT
$SG125651 DB	'Iteration:', 09H, 00H
	ORG $+4
$SG125652 DB	'---------------------------------------------', 00H
	ORG $+2
$SG125653 DB	'Direct Write:', 09H, 00H
	ORG $+1
$SG125654 DB	'Setter Write:', 09H, 00H
	ORG $+1
$SG125655 DB	'Penalty Factor:', 09H, 00H
	ORG $+7
$SG125656 DB	'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~', 00H
	ORG $+2
$SG125657 DB	'Direct Read:', 09H, 00H
	ORG $+2
$SG125658 DB	'Getter Read:', 09H, 00H
	ORG $+2
$SG125659 DB	'Penalty Factor:', 09H, 00H
	ORG $+7
$SG125660 DB	'=============================================', 00H
	ORG $+2
$SG125661 DB	'Direct Write Average:', 09H, 00H
	ORG $+1
$SG125662 DB	'Setter Write Average:', 09H, 00H
	ORG $+1
$SG125663 DB	'Penalty Factor:', 09H, 09H, 00H
	ORG $+6
$SG125664 DB	'Direct Read Average:', 09H, 00H
	ORG $+2
$SG125665 DB	'Getter Read Average:', 09H, 00H
	ORG $+2
$SG125666 DB	'Penalty Factor:', 09H, 09H, 00H
CONST	ENDS
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	?GetMemberA@Object@@QEAAHXZ			; Object::GetMemberA
PUBLIC	?SetMemberA@Object@@QEAAXH@Z			; Object::SetMemberA
PUBLIC	?EmptyLoop@Object@@QEAANXZ			; Object::EmptyLoop
PUBLIC	?ModifyOtherObjectDirect@Object@@QEAANXZ	; Object::ModifyOtherObjectDirect
PUBLIC	?AccessOtherObjectDirect@Object@@QEAANXZ	; Object::AccessOtherObjectDirect
PUBLIC	?ModifyOtherObjectIndirect@Object@@QEAANXZ	; Object::ModifyOtherObjectIndirect
PUBLIC	?AccessOtherObjectIndirect@Object@@QEAANXZ	; Object::AccessOtherObjectIndirect
PUBLIC	main
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	__real@4034000000000000
EXTRN	__imp_QueryPerformanceCounter:PROC
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__imp_?good@ios_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QEBAHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEBA_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEAA_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+55
	DD	imagerel $unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DD imagerel $LN5
	DD	imagerel $LN5+55
	DD	imagerel $unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?EmptyLoop@Object@@QEAANXZ DD imagerel $LN6
	DD	imagerel $LN6+121
	DD	imagerel $unwind$?EmptyLoop@Object@@QEAANXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ModifyOtherObjectDirect@Object@@QEAANXZ DD imagerel $LN6
	DD	imagerel $LN6+136
	DD	imagerel $unwind$?ModifyOtherObjectDirect@Object@@QEAANXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AccessOtherObjectDirect@Object@@QEAANXZ DD imagerel $LN6
	DD	imagerel $LN6+136
	DD	imagerel $unwind$?AccessOtherObjectDirect@Object@@QEAANXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ModifyOtherObjectIndirect@Object@@QEAANXZ DD imagerel $LN6
	DD	imagerel $LN6+148
	DD	imagerel $unwind$?ModifyOtherObjectIndirect@Object@@QEAANXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AccessOtherObjectIndirect@Object@@QEAANXZ DD imagerel $LN6
	DD	imagerel $LN6+138
	DD	imagerel $unwind$?AccessOtherObjectIndirect@Object@@QEAANXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN6
	DD	imagerel $LN6+1661
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel $LN24
	DD	imagerel $LN24+921
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+77
	DD	imagerel $unwind$?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN4
	DD	imagerel $LN4+111
	DD	imagerel $unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+88
	DD	imagerel $unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN6
	DD	imagerel $LN6+208
	DD	imagerel $unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+80
	DD	imagerel $unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 020a01H
	DD	05006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 06H
	DB	00H
	DB	00H
	DB	05H, 04H
	DB	02H
	DB	0d5H, 08H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	00H
	DD	imagerel ?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 018H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 021119H
	DD	0150111H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	020701H
	DD	0370107H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AccessOtherObjectIndirect@Object@@QEAANXZ DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ModifyOtherObjectIndirect@Object@@QEAANXZ DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AccessOtherObjectDirect@Object@@QEAANXZ DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ModifyOtherObjectDirect@Object@@QEAANXZ DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EmptyLoop@Object@@QEAANXZ DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DD 010e01H
	DD	0220eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD 010901H
	DD	02209H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT

; 124  :         explicit __CLR_OR_THIS_CALL operator bool() const {

	mov	QWORD PTR [rsp+8], rcx

; 125  :             return _Ok;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+8]

; 126  :         }

	ret	0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
tv72 = 32
_Zero_uncaught_exceptions$ = 33
this$ = 64
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT

; 109  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 110  : #if !_HAS_EXCEPTIONS
; 111  :             const bool _Zero_uncaught_exceptions = true;
; 112  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 113  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

	call	?uncaught_exception@std@@YA_NXZ		; std::uncaught_exception
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@sentry
	mov	BYTE PTR tv72[rsp], 1
	jmp	SHORT $LN5@sentry
$LN4@sentry:
	mov	BYTE PTR tv72[rsp], 0
$LN5@sentry:
	movzx	eax, BYTE PTR tv72[rsp]
	mov	BYTE PTR _Zero_uncaught_exceptions$[rsp], al

; 114  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 115  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 116  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  : 
; 118  :             if (_Zero_uncaught_exceptions) {

	movzx	eax, BYTE PTR _Zero_uncaught_exceptions$[rsp]
	test	eax, eax
	je	SHORT $LN2@sentry

; 119  :                 this->_Myostr._Osfx();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
$LN2@sentry:

; 120  :             }
; 121  :         }

	mov	rcx, QWORD PTR this$[rsp]
	call	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
	add	rsp, 56					; 00000038H
	ret	0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Tied$ = 32
this$ = 64
_Ostr$ = 72
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rdx, QWORD PTR _Ostr$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base

; 93   :             if (!_Ostr.good()) {

	mov	rax, QWORD PTR _Ostr$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@sentry

; 94   :                 _Ok = false;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+8], 0

; 95   :                 return;

	jmp	SHORT $LN1@sentry
$LN2@sentry:

; 96   :             }
; 97   : 
; 98   :             const auto _Tied = _Ostr.tie();

	mov	rax, QWORD PTR _Ostr$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
	mov	QWORD PTR _Tied$[rsp], rax

; 99   :             if (!_Tied || _Tied == &_Ostr) {

	cmp	QWORD PTR _Tied$[rsp], 0
	je	SHORT $LN4@sentry
	mov	rax, QWORD PTR _Ostr$[rsp]
	cmp	QWORD PTR _Tied$[rsp], rax
	jne	SHORT $LN3@sentry
$LN4@sentry:

; 100  :                 _Ok = true;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+8], 1

; 101  :                 return;

	jmp	SHORT $LN1@sentry
$LN3@sentry:

; 102  :             }
; 103  : 
; 104  :             _Tied->flush();

	mov	rcx, QWORD PTR _Tied$[rsp]
	call	QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 105  :             _Ok = _Ostr.good(); // store test only after flushing tie

	mov	rax, QWORD PTR _Ostr$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+8], al
$LN1@sentry:

; 106  :         }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 56					; 00000038H
	ret	0
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Rdbuf$ = 32
tv72 = 40
this$ = 64
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT

; 78   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv72[rsp], rax
	mov	rax, QWORD PTR tv72[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR tv72[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	mov	QWORD PTR _Rdbuf$[rsp], rax

; 80   :             if (_Rdbuf) {

	cmp	QWORD PTR _Rdbuf$[rsp], 0
	je	SHORT $LN2@Sentry_bas

; 81   :                 _Rdbuf->_Unlock();

	mov	rax, QWORD PTR _Rdbuf$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Rdbuf$[rsp]
	call	QWORD PTR [rax+16]
$LN2@Sentry_bas:

; 82   :             }
; 83   :         }

	add	rsp, 56					; 00000038H
	ret	0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Rdbuf$ = 32
tv73 = 40
this$ = 64
_Ostr$ = 72
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Ostr$[rsp]
	mov	QWORD PTR [rax], rcx

; 72   :             const auto _Rdbuf = _Myostr.rdbuf();

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv73[rsp], rax
	mov	rax, QWORD PTR tv73[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR tv73[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	mov	QWORD PTR _Rdbuf$[rsp], rax

; 73   :             if (_Rdbuf) {

	cmp	QWORD PTR _Rdbuf$[rsp], 0
	je	SHORT $LN2@Sentry_bas

; 74   :                 _Rdbuf->_Lock();

	mov	rax, QWORD PTR _Rdbuf$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Rdbuf$[rsp]
	call	QWORD PTR [rax+8]
$LN2@Sentry_bas:

; 75   :             }
; 76   :         }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 56					; 00000038H
	ret	0
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
tv80 = 32
_Ostr$ = 64
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 978  :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 979  :     _Ostr.put(_Ostr.widen('\n'));

	mov	rax, QWORD PTR _Ostr$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv80[rsp], rax
	mov	dl, 10
	mov	rcx, QWORD PTR tv80[rsp]
	call	QWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z
	movzx	edx, al
	mov	rcx, QWORD PTR _Ostr$[rsp]
	call	QWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z

; 980  :     _Ostr.flush();

	mov	rcx, QWORD PTR _Ostr$[rsp]
	call	QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 981  :     return _Ostr;

	mov	rax, QWORD PTR _Ostr$[rsp]

; 982  : }

	add	rsp, 56					; 00000038H
	ret	0
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
_TEXT	SEGMENT
_State$ = 32
tv192 = 36
tv254 = 37
_Pad$ = 40
_Count$ = 48
$T1 = 56
$T2 = 60
$T3 = 64
$T4 = 68
tv137 = 72
tv194 = 80
tv219 = 88
tv256 = 96
tv277 = 104
tv291 = 112
tv306 = 120
$T5 = 128
_Ok$ = 136
_Ostr$ = 176
_Val$ = 184
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 734  :     const char* _Val) { // insert NTBS into char stream

$LN24:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 168				; 000000a8H

; 735  :     using _Elem = char;
; 736  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 737  : 
; 738  :     ios_base::iostate _State = ios_base::goodbit;

	mov	DWORD PTR _State$[rsp], 0

; 739  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

	mov	rcx, QWORD PTR _Val$[rsp]
	call	?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
	mov	QWORD PTR _Count$[rsp], rax

; 740  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

	mov	rax, QWORD PTR _Ostr$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
	test	rax, rax
	jle	SHORT $LN17@operator
	mov	rax, QWORD PTR _Ostr$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
	cmp	rax, QWORD PTR _Count$[rsp]
	jle	SHORT $LN17@operator
	mov	rax, QWORD PTR _Ostr$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
	sub	rax, QWORD PTR _Count$[rsp]
	mov	QWORD PTR tv137[rsp], rax
	jmp	SHORT $LN18@operator
$LN17@operator:
	mov	QWORD PTR tv137[rsp], 0
$LN18@operator:
	mov	rax, QWORD PTR tv137[rsp]
	mov	QWORD PTR _Pad$[rsp], rax

; 741  :     const typename _Myos::sentry _Ok(_Ostr);

	mov	rdx, QWORD PTR _Ostr$[rsp]
	lea	rcx, QWORD PTR _Ok$[rsp]
	call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 742  : 
; 743  :     if (!_Ok) {

	lea	rcx, QWORD PTR _Ok$[rsp]
	call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@operator

; 744  :         _State |= ios_base::badbit;

	mov	eax, DWORD PTR _State$[rsp]
	or	eax, 4
	mov	DWORD PTR _State$[rsp], eax

; 745  :     } else { // state okay, insert

	jmp	$LN9@operator
$LN8@operator:

; 746  :         _TRY_IO_BEGIN
; 747  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

	mov	rax, QWORD PTR _Ostr$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?flags@ios_base@std@@QEBAHXZ
	and	eax, 448				; 000001c0H
	cmp	eax, 64					; 00000040H
	je	$LN11@operator

; 748  :             for (; 0 < _Pad; --_Pad) { // pad on left

	jmp	SHORT $LN4@operator
$LN2@operator:
	mov	rax, QWORD PTR _Pad$[rsp]
	dec	rax
	mov	QWORD PTR _Pad$[rsp], rax
$LN4@operator:
	cmp	QWORD PTR _Pad$[rsp], 0
	jle	$LN11@operator

; 749  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

	mov	rax, QWORD PTR _Ostr$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	mov	QWORD PTR tv194[rsp], rax
	mov	rax, QWORD PTR _Ostr$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
	mov	BYTE PTR tv192[rsp], al
	movzx	edx, BYTE PTR tv192[rsp]
	mov	rcx, QWORD PTR tv194[rsp]
	call	QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
	mov	DWORD PTR $T1[rsp], eax
	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	mov	DWORD PTR $T2[rsp], eax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN12@operator

; 750  :                     _State |= ios_base::badbit; // insertion failed, quit

	mov	eax, DWORD PTR _State$[rsp]
	or	eax, 4
	mov	DWORD PTR _State$[rsp], eax

; 751  :                     break;

	jmp	SHORT $LN11@operator
$LN12@operator:

; 752  :                 }
; 753  :             }

	jmp	$LN2@operator
$LN11@operator:

; 754  :         }
; 755  : 
; 756  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

	cmp	DWORD PTR _State$[rsp], 0
	jne	SHORT $LN13@operator
	mov	rax, QWORD PTR _Ostr$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	mov	QWORD PTR tv219[rsp], rax
	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _Val$[rsp]
	mov	rcx, QWORD PTR tv219[rsp]
	call	QWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
	cmp	rax, QWORD PTR _Count$[rsp]
	je	SHORT $LN13@operator

; 757  :             _State |= ios_base::badbit;

	mov	eax, DWORD PTR _State$[rsp]
	or	eax, 4
	mov	DWORD PTR _State$[rsp], eax
$LN13@operator:

; 758  :         }
; 759  : 
; 760  :         if (_State == ios_base::goodbit) {

	cmp	DWORD PTR _State$[rsp], 0
	jne	$LN14@operator

; 761  :             for (; 0 < _Pad; --_Pad) { // pad on right

	jmp	SHORT $LN7@operator
$LN5@operator:
	mov	rax, QWORD PTR _Pad$[rsp]
	dec	rax
	mov	QWORD PTR _Pad$[rsp], rax
$LN7@operator:
	cmp	QWORD PTR _Pad$[rsp], 0
	jle	$LN14@operator

; 762  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

	mov	rax, QWORD PTR _Ostr$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	mov	QWORD PTR tv256[rsp], rax
	mov	rax, QWORD PTR _Ostr$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
	mov	BYTE PTR tv254[rsp], al
	movzx	edx, BYTE PTR tv254[rsp]
	mov	rcx, QWORD PTR tv256[rsp]
	call	QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
	mov	DWORD PTR $T3[rsp], eax
	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	mov	DWORD PTR $T4[rsp], eax
	lea	rdx, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@operator

; 763  :                     _State |= ios_base::badbit; // insertion failed, quit

	mov	eax, DWORD PTR _State$[rsp]
	or	eax, 4
	mov	DWORD PTR _State$[rsp], eax

; 764  :                     break;

	jmp	SHORT $LN14@operator
$LN15@operator:

; 765  :                 }
; 766  :             }

	jmp	$LN5@operator
$LN14@operator:

; 767  :         }
; 768  : 
; 769  :         _Ostr.width(0);

	mov	rax, QWORD PTR _Ostr$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv277[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv277[rsp]
	call	QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z
	npad	1
	jmp	SHORT $LN9@operator
$LN22@operator:
$LN9@operator:

; 770  :         _CATCH_IO_(ios_base, _Ostr)
; 771  :     }
; 772  : 
; 773  :     _Ostr.setstate(_State);

	mov	rax, QWORD PTR _Ostr$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv306[rsp], rax
	xor	r8d, r8d
	mov	edx, DWORD PTR _State$[rsp]
	mov	rcx, QWORD PTR tv306[rsp]
	call	QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z

; 774  :     return _Ostr;

	mov	rax, QWORD PTR _Ostr$[rsp]
	mov	QWORD PTR $T5[rsp], rax
	lea	rcx, QWORD PTR _Ok$[rsp]
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
	mov	rax, QWORD PTR $T5[rsp]

; 775  : }

	add	rsp, 168				; 000000a8H
	ret	0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
tv192 = 36
tv254 = 37
_Pad$ = 40
_Count$ = 48
$T1 = 56
$T2 = 60
$T3 = 64
$T4 = 68
tv137 = 72
tv194 = 80
tv219 = 88
tv256 = 96
tv277 = 104
tv291 = 112
tv306 = 120
$T5 = 128
_Ok$ = 136
_Ostr$ = 176
_Val$ = 184
?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$0

; 770  :         _CATCH_IO_(ios_base, _Ostr)

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
	mov	rax, QWORD PTR _Ostr$[rbp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv291[rbp], rax
	mov	r8b, 1
	mov	edx, 4
	mov	rcx, QWORD PTR tv291[rbp]
	call	QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
	npad	1
	lea	rax, $LN22@catch$0
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
tv192 = 36
tv254 = 37
_Pad$ = 40
_Count$ = 48
$T1 = 56
$T2 = 60
$T3 = 64
$T4 = 68
tv137 = 72
tv194 = 80
tv219 = 88
tv256 = 96
tv277 = 104
tv291 = 112
tv306 = 120
$T5 = 128
_Ok$ = 136
_Ostr$ = 176
_Val$ = 184
?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$0

; 770  :         _CATCH_IO_(ios_base, _Ostr)

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
	mov	rax, QWORD PTR _Ostr$[rbp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv291[rbp], rax
	mov	r8b, 1
	mov	edx, 4
	mov	rcx, QWORD PTR tv291[rbp]
	call	QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
	npad	1
	lea	rax, $LN22@catch$0
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
; File main.cpp
;	COMDAT main
_TEXT	SEGMENT
i$1 = 32
setterWriteTotal$ = 40
directWriteTotal$ = 48
getterReadTotal$ = 56
directReadTotal$ = 64
directRead$2 = 72
setterWrite$3 = 80
directWrite$4 = 88
getterRead$5 = 96
objectA$ = 104
tv74 = 128
tv79 = 136
tv86 = 144
tv87 = 152
tv131 = 160
tv136 = 168
tv137 = 176
tv149 = 184
tv154 = 192
tv163 = 200
tv168 = 208
tv175 = 216
tv176 = 224
tv188 = 232
tv193 = 240
tv194 = 248
tv206 = 256
tv211 = 264
tv220 = 272
tv225 = 280
tv232 = 288
tv243 = 296
tv248 = 304
tv257 = 312
tv262 = 320
tv271 = 328
tv276 = 336
tv281 = 344
tv290 = 352
tv295 = 360
tv304 = 368
tv309 = 376
tv318 = 384
tv323 = 392
MAX_ITERATIONS$ = 400
objectB$ = 408
main	PROC						; COMDAT

; 115  : {

$LN6:
	sub	rsp, 440				; 000001b8H

; 116  : 	QueryPerformanceFrequency(&iFreq);

	lea	rcx, OFFSET FLAT:?iFreq@@3T_LARGE_INTEGER@@A ; iFreq
	call	QWORD PTR __imp_QueryPerformanceFrequency

; 117  : 
; 118  : 	Object objectA;
; 119  : 	Object objectB;
; 120  : 
; 121  : 	objectA.OtherObject = &objectB;

	lea	rax, QWORD PTR objectB$[rsp]
	mov	QWORD PTR objectA$[rsp], rax

; 122  : 	
; 123  : 	double directWriteTotal = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR directWriteTotal$[rsp], xmm0

; 124  : 	double setterWriteTotal = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR setterWriteTotal$[rsp], xmm0

; 125  : 	double directReadTotal = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR directReadTotal$[rsp], xmm0

; 126  : 	double getterReadTotal = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR getterReadTotal$[rsp], xmm0

; 127  : 	
; 128  : 	const int MAX_ITERATIONS = 20;

	mov	DWORD PTR MAX_ITERATIONS$[rsp], 20

; 129  : 
; 130  : 	for (int i = 0; i < MAX_ITERATIONS; i++)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@main
$LN2@main:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@main:
	cmp	DWORD PTR i$1[rsp], 20
	jge	$LN3@main

; 131  : 	{
; 132  : 		std::cout << "Iteration:\t" << i << std::endl;

	lea	rdx, OFFSET FLAT:$SG125651
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR tv74[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
	mov	QWORD PTR tv79[rsp], rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	rcx, QWORD PTR tv79[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 133  : 		std::cout << "---------------------------------------------" << std::endl;

	lea	rdx, OFFSET FLAT:$SG125652
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	QWORD PTR tv86[rsp], rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	rcx, QWORD PTR tv86[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 134  : 
; 135  : 		double directWrite = objectA.ModifyOtherObjectDirect() - objectA.EmptyLoop();

	lea	rcx, QWORD PTR objectA$[rsp]
	call	?ModifyOtherObjectDirect@Object@@QEAANXZ ; Object::ModifyOtherObjectDirect
	movsd	QWORD PTR tv87[rsp], xmm0
	lea	rcx, QWORD PTR objectA$[rsp]
	call	?EmptyLoop@Object@@QEAANXZ		; Object::EmptyLoop
	movsd	xmm1, QWORD PTR tv87[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR directWrite$4[rsp], xmm0

; 136  : 		directWriteTotal += directWrite;

	movsd	xmm0, QWORD PTR directWriteTotal$[rsp]
	addsd	xmm0, QWORD PTR directWrite$4[rsp]
	movsd	QWORD PTR directWriteTotal$[rsp], xmm0

; 137  : 		std::cout << "Direct Write:\t" << directWrite << std::endl;

	lea	rdx, OFFSET FLAT:$SG125653
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	QWORD PTR tv131[rsp], rax
	movsd	xmm1, QWORD PTR directWrite$4[rsp]
	mov	rcx, QWORD PTR tv131[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
	mov	QWORD PTR tv136[rsp], rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	rcx, QWORD PTR tv136[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 138  : 
; 139  : 		double setterWrite = objectA.ModifyOtherObjectIndirect() - objectA.EmptyLoop();

	lea	rcx, QWORD PTR objectA$[rsp]
	call	?ModifyOtherObjectIndirect@Object@@QEAANXZ ; Object::ModifyOtherObjectIndirect
	movsd	QWORD PTR tv137[rsp], xmm0
	lea	rcx, QWORD PTR objectA$[rsp]
	call	?EmptyLoop@Object@@QEAANXZ		; Object::EmptyLoop
	movsd	xmm1, QWORD PTR tv137[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR setterWrite$3[rsp], xmm0

; 140  : 		setterWriteTotal += setterWrite;

	movsd	xmm0, QWORD PTR setterWriteTotal$[rsp]
	addsd	xmm0, QWORD PTR setterWrite$3[rsp]
	movsd	QWORD PTR setterWriteTotal$[rsp], xmm0

; 141  : 		std::cout << "Setter Write:\t" << setterWrite << std::endl;

	lea	rdx, OFFSET FLAT:$SG125654
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	QWORD PTR tv149[rsp], rax
	movsd	xmm1, QWORD PTR setterWrite$3[rsp]
	mov	rcx, QWORD PTR tv149[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
	mov	QWORD PTR tv154[rsp], rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	rcx, QWORD PTR tv154[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 142  : 
; 143  : 		std::cout << "Penalty Factor:\t" << (setterWrite / directWrite) << std::endl;

	lea	rdx, OFFSET FLAT:$SG125655
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	QWORD PTR tv163[rsp], rax
	movsd	xmm0, QWORD PTR setterWrite$3[rsp]
	divsd	xmm0, QWORD PTR directWrite$4[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR tv163[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
	mov	QWORD PTR tv168[rsp], rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	rcx, QWORD PTR tv168[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 144  : 
; 145  : 		std::cout << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << std::endl;

	lea	rdx, OFFSET FLAT:$SG125656
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	QWORD PTR tv175[rsp], rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	rcx, QWORD PTR tv175[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 146  : 
; 147  : 		double directRead = objectA.AccessOtherObjectDirect() - objectA.EmptyLoop();

	lea	rcx, QWORD PTR objectA$[rsp]
	call	?AccessOtherObjectDirect@Object@@QEAANXZ ; Object::AccessOtherObjectDirect
	movsd	QWORD PTR tv176[rsp], xmm0
	lea	rcx, QWORD PTR objectA$[rsp]
	call	?EmptyLoop@Object@@QEAANXZ		; Object::EmptyLoop
	movsd	xmm1, QWORD PTR tv176[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR directRead$2[rsp], xmm0

; 148  : 		directReadTotal += directRead;

	movsd	xmm0, QWORD PTR directReadTotal$[rsp]
	addsd	xmm0, QWORD PTR directRead$2[rsp]
	movsd	QWORD PTR directReadTotal$[rsp], xmm0

; 149  : 		std::cout << "Direct Read:\t" << directRead << std::endl;

	lea	rdx, OFFSET FLAT:$SG125657
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	QWORD PTR tv188[rsp], rax
	movsd	xmm1, QWORD PTR directRead$2[rsp]
	mov	rcx, QWORD PTR tv188[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
	mov	QWORD PTR tv193[rsp], rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	rcx, QWORD PTR tv193[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 150  : 
; 151  : 		double getterRead = objectA.AccessOtherObjectIndirect() - objectA.EmptyLoop();

	lea	rcx, QWORD PTR objectA$[rsp]
	call	?AccessOtherObjectIndirect@Object@@QEAANXZ ; Object::AccessOtherObjectIndirect
	movsd	QWORD PTR tv194[rsp], xmm0
	lea	rcx, QWORD PTR objectA$[rsp]
	call	?EmptyLoop@Object@@QEAANXZ		; Object::EmptyLoop
	movsd	xmm1, QWORD PTR tv194[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR getterRead$5[rsp], xmm0

; 152  : 		getterReadTotal += getterRead;

	movsd	xmm0, QWORD PTR getterReadTotal$[rsp]
	addsd	xmm0, QWORD PTR getterRead$5[rsp]
	movsd	QWORD PTR getterReadTotal$[rsp], xmm0

; 153  : 		std::cout << "Getter Read:\t" << getterRead << std::endl;

	lea	rdx, OFFSET FLAT:$SG125658
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	QWORD PTR tv206[rsp], rax
	movsd	xmm1, QWORD PTR getterRead$5[rsp]
	mov	rcx, QWORD PTR tv206[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
	mov	QWORD PTR tv211[rsp], rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	rcx, QWORD PTR tv211[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 154  : 
; 155  : 		std::cout << "Penalty Factor:\t" << (getterRead / directRead) << std::endl;

	lea	rdx, OFFSET FLAT:$SG125659
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	QWORD PTR tv220[rsp], rax
	movsd	xmm0, QWORD PTR getterRead$5[rsp]
	divsd	xmm0, QWORD PTR directRead$2[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR tv220[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
	mov	QWORD PTR tv225[rsp], rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	rcx, QWORD PTR tv225[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 156  : 
; 157  : 		std::cout << "=============================================" << std::endl;

	lea	rdx, OFFSET FLAT:$SG125660
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	QWORD PTR tv232[rsp], rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	rcx, QWORD PTR tv232[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 158  : 	}

	jmp	$LN2@main
$LN3@main:

; 159  : 
; 160  : 	std::cout << std::endl;

	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 161  : 	std::cout << "Direct Write Average:\t" << (directWriteTotal / MAX_ITERATIONS) << std::endl;

	lea	rdx, OFFSET FLAT:$SG125661
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	QWORD PTR tv243[rsp], rax
	movsd	xmm0, QWORD PTR directWriteTotal$[rsp]
	divsd	xmm0, QWORD PTR __real@4034000000000000
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR tv243[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
	mov	QWORD PTR tv248[rsp], rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	rcx, QWORD PTR tv248[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 162  : 	std::cout << "Setter Write Average:\t" << (setterWriteTotal / MAX_ITERATIONS) << std::endl;

	lea	rdx, OFFSET FLAT:$SG125662
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	QWORD PTR tv257[rsp], rax
	movsd	xmm0, QWORD PTR setterWriteTotal$[rsp]
	divsd	xmm0, QWORD PTR __real@4034000000000000
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR tv257[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
	mov	QWORD PTR tv262[rsp], rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	rcx, QWORD PTR tv262[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 163  : 	std::cout << "Penalty Factor:\t\t" << (setterWriteTotal / directWriteTotal) << std::endl << std::endl;

	lea	rdx, OFFSET FLAT:$SG125663
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	QWORD PTR tv271[rsp], rax
	movsd	xmm0, QWORD PTR setterWriteTotal$[rsp]
	divsd	xmm0, QWORD PTR directWriteTotal$[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR tv271[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
	mov	QWORD PTR tv276[rsp], rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	rcx, QWORD PTR tv276[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
	mov	QWORD PTR tv281[rsp], rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	rcx, QWORD PTR tv281[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 164  : 	std::cout << "Direct Read Average:\t" << (directReadTotal / MAX_ITERATIONS) << std::endl;

	lea	rdx, OFFSET FLAT:$SG125664
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	QWORD PTR tv290[rsp], rax
	movsd	xmm0, QWORD PTR directReadTotal$[rsp]
	divsd	xmm0, QWORD PTR __real@4034000000000000
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR tv290[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
	mov	QWORD PTR tv295[rsp], rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	rcx, QWORD PTR tv295[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 165  : 	std::cout << "Getter Read Average:\t" << (getterReadTotal / MAX_ITERATIONS) << std::endl;

	lea	rdx, OFFSET FLAT:$SG125665
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	QWORD PTR tv304[rsp], rax
	movsd	xmm0, QWORD PTR getterReadTotal$[rsp]
	divsd	xmm0, QWORD PTR __real@4034000000000000
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR tv304[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
	mov	QWORD PTR tv309[rsp], rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	rcx, QWORD PTR tv309[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 166  : 	std::cout << "Penalty Factor:\t\t" << (getterReadTotal / directReadTotal) << std::endl;

	lea	rdx, OFFSET FLAT:$SG125666
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	QWORD PTR tv318[rsp], rax
	movsd	xmm0, QWORD PTR getterReadTotal$[rsp]
	divsd	xmm0, QWORD PTR directReadTotal$[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR tv318[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
	mov	QWORD PTR tv323[rsp], rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	rcx, QWORD PTR tv323[rsp]
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 167  : 
; 168  : 
; 169  : 	return 0;

	xor	eax, eax

; 170  : }

	add	rsp, 440				; 000001b8H
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File main.cpp
;	COMDAT ?AccessOtherObjectIndirect@Object@@QEAANXZ
_TEXT	SEGMENT
i$ = 32
test$ = 36
start$ = 40
end$ = 48
time$ = 56
result$ = 64
this$ = 96
?AccessOtherObjectIndirect@Object@@QEAANXZ PROC		; Object::AccessOtherObjectIndirect, COMDAT

; 94   : 	{

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H

; 95   : 		LARGE_INTEGER start;
; 96   : 		LARGE_INTEGER end;
; 97   : 		LARGE_INTEGER time;
; 98   : 		int i = 0;

	mov	DWORD PTR i$[rsp], 0

; 99   : 		int test;
; 100  : 		QueryPerformanceCounter(&start);

	lea	rcx, QWORD PTR start$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter

; 101  : 		for (; i < 1000000000; i++)

	jmp	SHORT $LN4@AccessOthe
$LN2@AccessOthe:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@AccessOthe:
	cmp	DWORD PTR i$[rsp], 1000000000		; 3b9aca00H
	jge	SHORT $LN3@AccessOthe

; 102  : 		{
; 103  : 			test = OtherObject->GetMemberA();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?GetMemberA@Object@@QEAAHXZ		; Object::GetMemberA
	mov	DWORD PTR test$[rsp], eax

; 104  : 		}

	jmp	SHORT $LN2@AccessOthe
$LN3@AccessOthe:

; 105  : 		QueryPerformanceCounter(&end);

	lea	rcx, QWORD PTR end$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter

; 106  : 		time.QuadPart = end.QuadPart - start.QuadPart;

	mov	rax, QWORD PTR start$[rsp]
	mov	rcx, QWORD PTR end$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR time$[rsp], rax

; 107  : 		double result = (double)time.QuadPart / (double)iFreq.QuadPart;

	cvtsi2sd xmm0, QWORD PTR time$[rsp]
	cvtsi2sd xmm1, QWORD PTR ?iFreq@@3T_LARGE_INTEGER@@A ; iFreq
	divsd	xmm0, xmm1
	movsd	QWORD PTR result$[rsp], xmm0

; 108  : 		return result;

	movsd	xmm0, QWORD PTR result$[rsp]

; 109  : 	}

	add	rsp, 88					; 00000058H
	ret	0
?AccessOtherObjectIndirect@Object@@QEAANXZ ENDP		; Object::AccessOtherObjectIndirect
_TEXT	ENDS
; Function compile flags: /Odtp
; File main.cpp
;	COMDAT ?ModifyOtherObjectIndirect@Object@@QEAANXZ
_TEXT	SEGMENT
i$ = 32
tv71 = 40
start$ = 48
end$ = 56
time$ = 64
result$ = 72
this$ = 96
?ModifyOtherObjectIndirect@Object@@QEAANXZ PROC		; Object::ModifyOtherObjectIndirect, COMDAT

; 77   : 	{

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H

; 78   : 		LARGE_INTEGER start;
; 79   : 		LARGE_INTEGER end;
; 80   : 		LARGE_INTEGER time;
; 81   : 		int i = 0;

	mov	DWORD PTR i$[rsp], 0

; 82   : 		QueryPerformanceCounter(&start);

	lea	rcx, QWORD PTR start$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter

; 83   : 		for (; i < 1000000000; i++)

	jmp	SHORT $LN4@ModifyOthe
$LN2@ModifyOthe:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@ModifyOthe:
	cmp	DWORD PTR i$[rsp], 1000000000		; 3b9aca00H
	jge	SHORT $LN3@ModifyOthe

; 84   : 		{
; 85   : 			OtherObject->SetMemberA(i);

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv71[rsp], rax
	mov	edx, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR tv71[rsp]
	call	?SetMemberA@Object@@QEAAXH@Z		; Object::SetMemberA

; 86   : 		}

	jmp	SHORT $LN2@ModifyOthe
$LN3@ModifyOthe:

; 87   : 		QueryPerformanceCounter(&end);

	lea	rcx, QWORD PTR end$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter

; 88   : 		time.QuadPart = end.QuadPart - start.QuadPart;

	mov	rax, QWORD PTR start$[rsp]
	mov	rcx, QWORD PTR end$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR time$[rsp], rax

; 89   : 		double result = (double)time.QuadPart / (double)iFreq.QuadPart;

	cvtsi2sd xmm0, QWORD PTR time$[rsp]
	cvtsi2sd xmm1, QWORD PTR ?iFreq@@3T_LARGE_INTEGER@@A ; iFreq
	divsd	xmm0, xmm1
	movsd	QWORD PTR result$[rsp], xmm0

; 90   : 		return result;

	movsd	xmm0, QWORD PTR result$[rsp]

; 91   : 	}

	add	rsp, 88					; 00000058H
	ret	0
?ModifyOtherObjectIndirect@Object@@QEAANXZ ENDP		; Object::ModifyOtherObjectIndirect
_TEXT	ENDS
; Function compile flags: /Odtp
; File main.cpp
;	COMDAT ?AccessOtherObjectDirect@Object@@QEAANXZ
_TEXT	SEGMENT
i$ = 32
test$ = 36
start$ = 40
end$ = 48
time$ = 56
result$ = 64
this$ = 96
?AccessOtherObjectDirect@Object@@QEAANXZ PROC		; Object::AccessOtherObjectDirect, COMDAT

; 59   : 	{

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H

; 60   : 		LARGE_INTEGER start;
; 61   : 		LARGE_INTEGER end;
; 62   : 		LARGE_INTEGER time;
; 63   : 		int i = 0;

	mov	DWORD PTR i$[rsp], 0

; 64   : 		int test;
; 65   : 		QueryPerformanceCounter(&start);

	lea	rcx, QWORD PTR start$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter

; 66   : 		for (; i < 1000000000; i++)

	jmp	SHORT $LN4@AccessOthe
$LN2@AccessOthe:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@AccessOthe:
	cmp	DWORD PTR i$[rsp], 1000000000		; 3b9aca00H
	jge	SHORT $LN3@AccessOthe

; 67   : 		{
; 68   : 			test = OtherObject->MemberA;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR test$[rsp], eax

; 69   : 		}

	jmp	SHORT $LN2@AccessOthe
$LN3@AccessOthe:

; 70   : 		QueryPerformanceCounter(&end);

	lea	rcx, QWORD PTR end$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter

; 71   : 		time.QuadPart = end.QuadPart - start.QuadPart;

	mov	rax, QWORD PTR start$[rsp]
	mov	rcx, QWORD PTR end$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR time$[rsp], rax

; 72   : 		double result = (double)time.QuadPart / (double)iFreq.QuadPart;

	cvtsi2sd xmm0, QWORD PTR time$[rsp]
	cvtsi2sd xmm1, QWORD PTR ?iFreq@@3T_LARGE_INTEGER@@A ; iFreq
	divsd	xmm0, xmm1
	movsd	QWORD PTR result$[rsp], xmm0

; 73   : 		return result;

	movsd	xmm0, QWORD PTR result$[rsp]

; 74   : 	}

	add	rsp, 88					; 00000058H
	ret	0
?AccessOtherObjectDirect@Object@@QEAANXZ ENDP		; Object::AccessOtherObjectDirect
_TEXT	ENDS
; Function compile flags: /Odtp
; File main.cpp
;	COMDAT ?ModifyOtherObjectDirect@Object@@QEAANXZ
_TEXT	SEGMENT
i$ = 32
start$ = 40
end$ = 48
time$ = 56
result$ = 64
this$ = 96
?ModifyOtherObjectDirect@Object@@QEAANXZ PROC		; Object::ModifyOtherObjectDirect, COMDAT

; 42   : 	{

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H

; 43   : 		LARGE_INTEGER start;
; 44   : 		LARGE_INTEGER end;
; 45   : 		LARGE_INTEGER time;
; 46   : 		int i = 0;

	mov	DWORD PTR i$[rsp], 0

; 47   : 		QueryPerformanceCounter(&start);

	lea	rcx, QWORD PTR start$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter

; 48   : 		for (; i < 1000000000; i++)

	jmp	SHORT $LN4@ModifyOthe
$LN2@ModifyOthe:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@ModifyOthe:
	cmp	DWORD PTR i$[rsp], 1000000000		; 3b9aca00H
	jge	SHORT $LN3@ModifyOthe

; 49   : 		{
; 50   : 			OtherObject->MemberA = i;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax+8], ecx

; 51   : 		}

	jmp	SHORT $LN2@ModifyOthe
$LN3@ModifyOthe:

; 52   : 		QueryPerformanceCounter(&end);

	lea	rcx, QWORD PTR end$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter

; 53   : 		time.QuadPart = end.QuadPart - start.QuadPart;

	mov	rax, QWORD PTR start$[rsp]
	mov	rcx, QWORD PTR end$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR time$[rsp], rax

; 54   : 		double result = (double)time.QuadPart / (double)iFreq.QuadPart;

	cvtsi2sd xmm0, QWORD PTR time$[rsp]
	cvtsi2sd xmm1, QWORD PTR ?iFreq@@3T_LARGE_INTEGER@@A ; iFreq
	divsd	xmm0, xmm1
	movsd	QWORD PTR result$[rsp], xmm0

; 55   : 		return result;

	movsd	xmm0, QWORD PTR result$[rsp]

; 56   : 	}

	add	rsp, 88					; 00000058H
	ret	0
?ModifyOtherObjectDirect@Object@@QEAANXZ ENDP		; Object::ModifyOtherObjectDirect
_TEXT	ENDS
; Function compile flags: /Odtp
; File main.cpp
;	COMDAT ?EmptyLoop@Object@@QEAANXZ
_TEXT	SEGMENT
i$ = 32
start$ = 40
end$ = 48
time$ = 56
result$ = 64
this$ = 96
?EmptyLoop@Object@@QEAANXZ PROC				; Object::EmptyLoop, COMDAT

; 26   : 	{

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H

; 27   : 		LARGE_INTEGER start;
; 28   : 		LARGE_INTEGER end;
; 29   : 		LARGE_INTEGER time;
; 30   : 		int i = 0;

	mov	DWORD PTR i$[rsp], 0

; 31   : 		QueryPerformanceCounter(&start);

	lea	rcx, QWORD PTR start$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter

; 32   : 		for (; i < 1000000000; i++)

	jmp	SHORT $LN4@EmptyLoop
$LN2@EmptyLoop:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@EmptyLoop:
	cmp	DWORD PTR i$[rsp], 1000000000		; 3b9aca00H
	jge	SHORT $LN3@EmptyLoop

; 33   : 		{
; 34   : 		}

	jmp	SHORT $LN2@EmptyLoop
$LN3@EmptyLoop:

; 35   : 		QueryPerformanceCounter(&end);

	lea	rcx, QWORD PTR end$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter

; 36   : 		time.QuadPart = end.QuadPart - start.QuadPart;

	mov	rax, QWORD PTR start$[rsp]
	mov	rcx, QWORD PTR end$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR time$[rsp], rax

; 37   : 		double result = (double)time.QuadPart / (double)iFreq.QuadPart;

	cvtsi2sd xmm0, QWORD PTR time$[rsp]
	cvtsi2sd xmm1, QWORD PTR ?iFreq@@3T_LARGE_INTEGER@@A ; iFreq
	divsd	xmm0, xmm1
	movsd	QWORD PTR result$[rsp], xmm0

; 38   : 		return result;

	movsd	xmm0, QWORD PTR result$[rsp]

; 39   : 	}

	add	rsp, 88					; 00000058H
	ret	0
?EmptyLoop@Object@@QEAANXZ ENDP				; Object::EmptyLoop
_TEXT	ENDS
; Function compile flags: /Odtp
; File main.cpp
;	COMDAT ?SetMemberA@Object@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 8
value$ = 16
?SetMemberA@Object@@QEAAXH@Z PROC			; Object::SetMemberA, COMDAT

; 21   : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 22   : 		MemberA = value;

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR value$[rsp]
	mov	DWORD PTR [rax+8], ecx

; 23   : 	}

	ret	0
?SetMemberA@Object@@QEAAXH@Z ENDP			; Object::SetMemberA
_TEXT	ENDS
; Function compile flags: /Odtp
; File main.cpp
;	COMDAT ?GetMemberA@Object@@QEAAHXZ
_TEXT	SEGMENT
this$ = 8
?GetMemberA@Object@@QEAAHXZ PROC			; Object::GetMemberA, COMDAT

; 16   : 	{

	mov	QWORD PTR [rsp+8], rcx

; 17   : 		return MemberA;

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+8]

; 18   : 	}

	ret	0
?GetMemberA@Object@@QEAAHXZ ENDP			; Object::GetMemberA
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 456  :         return static_cast<int_type>(EOF);

	mov	eax, -1

; 457  :     }

	ret	0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
_TEXT	SEGMENT
tv65 = 0
_Left$ = 32
_Right$ = 40
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 447  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 448  :         return _Left == _Right;

	mov	rax, QWORD PTR _Left$[rsp]
	mov	rcx, QWORD PTR _Right$[rsp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN3@eq_int_typ
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
	mov	DWORD PTR tv65[rsp], 0
$LN4@eq_int_typ:
	movzx	eax, BYTE PTR tv65[rsp]

; 449  :     }

	add	rsp, 24
	ret	0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
_TEXT	SEGMENT
tv68 = 0
tv67 = 8
_First$ = 32
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 373  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 374  :         // find length of null-terminated string
; 375  : #if _HAS_CXX17
; 376  : #ifdef __cpp_char8_t
; 377  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 378  : #if _HAS_U8_INTRINSICS
; 379  :             return __builtin_u8strlen(_First);
; 380  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 381  :             return _Primary_char_traits::length(_First);
; 382  : #endif // _HAS_U8_INTRINSICS
; 383  :         } else
; 384  : #endif // __cpp_char8_t
; 385  :         {
; 386  :             return __builtin_strlen(_First);

	mov	rax, QWORD PTR _First$[rsp]
	mov	QWORD PTR tv67[rsp], rax
	mov	QWORD PTR tv68[rsp], -1
$LL3@length:
	inc	QWORD PTR tv68[rsp]
	mov	rax, QWORD PTR tv67[rsp]
	mov	rcx, QWORD PTR tv68[rsp]
	cmp	BYTE PTR [rax+rcx], 0
	jne	SHORT $LL3@length
	mov	rax, QWORD PTR tv68[rsp]

; 387  :         }
; 388  : #else // _HAS_CXX17
; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));
; 390  : #endif // _HAS_CXX17
; 391  :     }

	add	rsp, 24
	ret	0
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
END
